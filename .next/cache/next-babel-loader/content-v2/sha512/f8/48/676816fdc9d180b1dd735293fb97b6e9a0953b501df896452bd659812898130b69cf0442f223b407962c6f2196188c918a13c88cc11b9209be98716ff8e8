{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\nimport Snackbar from './snackbar.jsx';\nimport { ERROR, TX_SUBMITTED } from '../../stores/constants';\nimport stores from \"../../stores\";\nconst emitter = stores.emitter;\n\nconst styles = theme => ({\n  root: {}\n});\n\nclass SnackbarController extends Component {\n  constructor(props) {\n    super();\n\n    _defineProperty(this, \"showError\", error => {\n      const snackbarObj = {\n        snackbarMessage: null,\n        snackbarType: null,\n        open: false\n      };\n      this.setState(snackbarObj);\n      const that = this;\n      setTimeout(() => {\n        const snackbarObj = {\n          snackbarMessage: error.toString(),\n          snackbarType: 'Error',\n          open: true\n        };\n        that.setState(snackbarObj);\n      });\n    });\n\n    _defineProperty(this, \"showHash\", txHash => {\n      const snackbarObj = {\n        snackbarMessage: null,\n        snackbarType: null,\n        open: false\n      };\n      this.setState(snackbarObj);\n      const that = this;\n      setTimeout(() => {\n        const snackbarObj = {\n          snackbarMessage: txHash,\n          snackbarType: 'Hash',\n          open: true\n        };\n        that.setState(snackbarObj);\n      });\n    });\n\n    this.state = {\n      open: false,\n      snackbarType: null,\n      snackbarMessage: null\n    };\n  }\n\n  componentWillMount() {\n    emitter.on(ERROR, this.showError);\n    emitter.on(TX_SUBMITTED, this.showHash);\n  }\n\n  componentWillUnmount() {\n    emitter.removeListener(ERROR, this.showError);\n    emitter.removeListener(TX_SUBMITTED, this.showHash);\n  }\n\n  render() {\n    const {\n      snackbarType,\n      snackbarMessage,\n      open\n    } = this.state;\n\n    if (open) {\n      return /*#__PURE__*/_jsx(Snackbar, {\n        type: snackbarType,\n        message: snackbarMessage,\n        open: true\n      });\n    } else {\n      return /*#__PURE__*/_jsx(\"div\", {});\n    }\n  }\n\n}\n\nexport default withStyles(styles)(SnackbarController);","map":null,"metadata":{},"sourceType":"module"}