{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ERROR, STORE_UPDATED, CONFIGURE, ACCOUNT_CONFIGURED, ACCOUNT_CHANGED, TRY_CONNECT_WALLET } from './constants';\nimport stores from './';\nimport Web3 from 'web3';\n\nclass Store {\n  constructor(dispatcher, emitter) {\n    _defineProperty(this, \"configure\", async () => {// if (window.ethereum) {\n      //   window.web3 = new Web3(ethereum);\n      //   try {\n      //     await ethereum.enable();\n      //     var accounts= await web3.eth.getAccounts();\n      //     this.setStore({ account: { address: accounts[0] }, web3: window.web3 })\n      //     this.emitter.emit(ACCOUNT_CONFIGURED)\n      //   } catch (error) {\n      //     // User denied account access...\n      //   }\n      //\n      //   this.updateAccount()\n      //\n      // } else if (window.web3) {\n      //   window.web3 = new Web3(web3.currentProvider);\n      //   // Acccounts always exposed\n      //   web3.eth.sendTransaction({/* ... */});\n      // }\n      // // Non-dapp browsers...\n      // else {\n      //   console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      // }\n    });\n\n    _defineProperty(this, \"updateAccount\", () => {\n      const that = this;\n      const res = window.ethereum.on('accountsChanged', function (accounts) {\n        that.setStore({\n          account: {\n            address: accounts[0]\n          }\n        });\n        that.emitter.emit(ACCOUNT_CHANGED);\n        that.emitter.emit(ACCOUNT_CONFIGURED);\n      });\n    });\n\n    _defineProperty(this, \"getWeb3Provider\", async () => {\n      let web3context = this.getStore('web3context');\n      let provider = null;\n\n      if (!web3context) {\n        provider = network.providers['1'];\n      } else {\n        provider = web3context.library.provider;\n      }\n\n      if (!provider) {\n        return null;\n      }\n\n      return new Web3(provider);\n    });\n\n    _defineProperty(this, \"tryConnectWallet\", async () => {\n      if (window.ethereum) {\n        window.web3 = new Web3(ethereum);\n\n        try {\n          await ethereum.enable();\n          var accounts = await web3.eth.getAccounts();\n          this.setStore({\n            account: {\n              address: accounts[0]\n            },\n            web3: window.web3\n          });\n          this.emitter.emit(ACCOUNT_CONFIGURED);\n        } catch (error) {// User denied account access...\n        }\n      } // Legacy dapp browsers...\n      else if (window.web3) {\n          window.web3 = new Web3(web3.currentProvider);\n          var accounts = await web3.eth.getAccounts();\n          this.setStore({\n            account: {\n              address: accounts[0]\n            },\n            web3: window.web3\n          });\n          this.emitter.emit(ACCOUNT_CONFIGURED);\n        } // Non-dapp browsers...\n        else {\n            console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n          }\n    });\n\n    this.dispatcher = dispatcher;\n    this.emitter = emitter;\n    this.store = {\n      account: null,\n      web3: null\n    };\n    dispatcher.register(function (payload) {\n      switch (payload.type) {\n        case CONFIGURE:\n          this.configure(payload);\n          break;\n\n        case TRY_CONNECT_WALLET:\n          this.tryConnectWallet(payload);\n          break;\n\n        default:\n          {}\n      }\n    }.bind(this));\n  }\n\n  getStore(index) {\n    return this.store[index];\n  }\n\n  setStore(obj) {\n    this.store = _objectSpread(_objectSpread({}, this.store), obj);\n    return this.emitter.emit(STORE_UPDATED);\n  }\n\n}\n\nexport default Store;","map":null,"metadata":{},"sourceType":"module"}